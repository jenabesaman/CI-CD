stages:
  - clone
  - build
  - publish
  - deploy

variables:
  GIT_STRATEGY: clone  # Ensures a fresh clone on each pipeline run

clone:
  stage: clone
  script:
    - git clone http://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@192.168.204.134:8502/root/dstv3.uploadinterface.api.git

build:
  stage: build
  script:
    - dotnet restore
    - dotnet build --configuration Release

publish:
  stage: publish
  script:
    - dotnet publish -c Release -o /home/DSTV3.UploadInterface.Api_pub/
    - rm /home/DSTV3.UploadInterface.Api_pub/appsettings.json  # Remove the appsettings.json file from the publish directory
    - cp ./appsettings.json /home/DSTV3.UploadInterface.Api_pub/  # Copy your own appsettings.json file into the publish directory
  artifacts:
    paths:
      - /home/DSTV3.UploadInterface.Api_pub/

deploy:
  stage: deploy
  script:
    - docker build -t dstv3.uploadinterface.api:v1.0 .
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker push dstv3.uploadinterface.api:v1.0
    - ssh root@192.168.204.134 'docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY'
    - ssh root@192.168.204.134 'docker pull dstv3.uploadinterface.api:v1.0'
    - ssh root@192.168.204.134 'docker stop dstv3.uploadinterface.api || true && docker rm dstv3.uploadinterface.api || true'
    - ssh root@192.168.204.134 'docker run -d -p 80:80 --name dstv3.uploadinterface.api dstv3.uploadinterface.api:v1.0'
  only:
    - master